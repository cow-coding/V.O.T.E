# -*- coding: utf-8 -*-
"""election_database.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tM5n0SBEOBl44VtXdUChnwra7e30IFqQ

# Import Library
"""

!pip install pymysql
!pip install xmltodict
!pip install cryptography

import json
import urllib
import pandas as pd
from urllib.parse import urlencode, quote_plus, unquote, quote
from urllib.request import urlopen
from pandas.io.json import json_normalize
from sqlalchemy import create_engine
import pymysql
import datetime as dt
import sklearn
from sklearn.preprocessing import LabelEncoder
import json
import xmltodict
import multiprocessing as mp
import cryptography

pymysql.install_as_MySQLdb()
import MySQLdb

pd.options.display.max_colwidth = 100

"""# Dataframe make function"""

service_key = 'SE0dHlfRrFs9F7Z8K6y6qmYRqrAFPtIrJnMdsrJLTMm1y5JvTVKl5Z8JpG4%2BBcvj%2Bv9kS1d1%2B8gQBmmxcMqMXg%3D%3D'

"""## Election Code dataframe make function"""

def get_election_df(pg_num = 1, num_row = 100):
  election_base_url = 'http://apis.data.go.kr/9760000/CommonCodeService/getCommonSgCodeList'

  page_no = str(pg_num)
  num_of_rows = str(num_row)                                  # maximum 34 datas

  queryParams = '?' + urlencode({
      quote_plus('pageNo') : page_no,
      quote_plus('numOfRows') : num_of_rows,
      quote_plus('resultType') : 'json',
      quote_plus('ServiceKey') : service_key 
  })

  API_election_code_url = election_base_url + unquote(queryParams)

  # Election code load

  '''
  < election code >
  (0)대표선거명               
  (1)대통령,(2)국회의원,(3)시도지사,(4)구시군장,(5)시도의원,(6)구시군의회의원
  (7)국회의원비례대표,(8)광역의원비례대표,(9)기초의원비례대표,(10)교육의원,(11)교육감
  '''

  response = urlopen(API_election_code_url)
  json_str = response.read()

  json_object = json.loads(json_str)

  body = [json_object['getCommonSgCodeList']['item']]

  election_code_data = pd.json_normalize(json_object['getCommonSgCodeList']['item'])
  
  return election_code_data

"""## Candidate Info dataframe make function"""

def get_candidate_df(sgId, sgTypecode, num_of_row=1000):
  candidate_base_url = 'http://apis.data.go.kr/9760000/PofelcddInfoInqireService/getPofelcddRegistSttusInfoInqire'

  queryParams = '?' + urlencode({
      quote_plus('numOfRows') : str(num_of_row),        # optional
      quote_plus('sgId') : str(sgId),                   # load from election code
      quote_plus('sgTypecode') : str(sgTypecode),       # load from election code
      quote_plus('sggName') : '',                       # optional
      quote_plus('sdName') : '',                        # optional
      quote_plus('resultType') : 'json',                # must set JSON
      quote_plus('ServiceKey') : service_key
  })

  API_candidate_url = candidate_base_url + unquote(queryParams)

  # candidate info load

  response = urlopen(API_candidate_url)
  json_str = response.read().decode('utf-8')

  json_object = json.loads(json_str)

  body = [json_object['getPofelcddRegistSttusInfoInqire']['item']]

  candidate_data = pd.json_normalize(json_object['getPofelcddRegistSttusInfoInqire']['item'])

  candidate_data.rename(columns={'HUBOID' : 'cnddtId', 'JD_NAME': 'partyName'}, inplace=True)

  return candidate_data

"""## Elction Promise dataframe make function"""

def get_promise_df(sgId, sgTypecode, hudoId):
  # 선거종료 후 데이터가 갱신되는 시점부터는 당선인의 공약 정보만 제공

  promise_base_url = 'http://apis.data.go.kr/9760000/ElecPrmsInfoInqireService/getCnddtElecPrmsInfoInqire'

  queryParams = '?' + urlencode({
      quote_plus('sgId') : str(sgId),                   # load from election code
      quote_plus('sgTypecode') : str(sgTypecode),       # load from election code
      quote_plus('cnddtId') : str(hudoId),              # parameter name is cnddtId but DB column name is HUBOID
      quote_plus('resultType') : 'json',                # must set JSON
      quote_plus('ServiceKey') : service_key
  })

  API_promise_url = promise_base_url + unquote(queryParams)

  # promise load

  response = urlopen(API_promise_url)
  json_str = response.read().decode('utf-8')

  json_object = json.loads(json_str)

  body = [json_object['getCnddtElecPrmsInfoInqire']['item']]

  promise_data = pd.json_normalize(json_object['getCnddtElecPrmsInfoInqire']['item'])

  return promise_data

"""## Polls Info dataframe make function

### Pre polls info dataframe make function
"""

def get_prepoll_df(sgId, sdName):
  prepoll_base_url = 'http://apis.data.go.kr/9760000/PolplcInfoInqireService2/getPrePolplcOtlnmapTrnsportInfoInqire'

  queryParams = '?' + urlencode({
      quote_plus('sgId') : str(sgId),                   # load from election code
      quote_plus('sdName') : quote(sdName),             # must input parameter, query parma is korean, so wrap the quote
      quote_plus('resultType') : 'json',                # must set JSON
      quote_plus('ServiceKey') : service_key
  })

  API_prepoll_url = prepoll_base_url + unquote(queryParams)

  response = urlopen(API_prepoll_url)
  json_str = response.read().decode('utf-8')

  json_object = json.loads(json_str)

  body = [json_object['getPrePolplcOtlnmapTrnsportInfoInqire']['item']]

  prepoll_data = pd.json_normalize(json_object['getPrePolplcOtlnmapTrnsportInfoInqire']['item'])
  return prepoll_data

"""### Main polls info dataframe make function"""

def get_mainpoll_df(sgId, sdName):
  poll_base_url = 'http://apis.data.go.kr/9760000/PolplcInfoInqireService2/getPolplcOtlnmapTrnsportInfoInqire'

  queryParams = '?' + urlencode({
      quote_plus('sgId') : str(sgId),                   # load from election code
      quote_plus('sdName') : quote(sdName),             # must input parameter, query parma is korean, so wrap the quote
      quote_plus('resultType') : 'json',                # must set JSON
      quote_plus('ServiceKey') : service_key
  })

  API_poll_url = poll_base_url + unquote(queryParams)

  response = urlopen(API_poll_url)
  json_str = response.read().decode('utf-8')

  json_object = json.loads(json_str)

  body = [json_object['getPolplcOtlnmapTrnsportInfoInqire']['item']]

  poll_data = pd.json_normalize(json_object['getPolplcOtlnmapTrnsportInfoInqire']['item'])
  return poll_data

"""## Politician dataframe make function

### Current Politician
"""

def get_curr_politician_mem(numOfRows=1000):
  curr_politician_base_url = 'http://apis.data.go.kr/9710000/NationalAssemblyInfoService/getMemberCurrStateList'

  queryParams = '?' + urlencode({
      quote_plus('numOfRows') : numOfRows,
      quote_plus('resultType') : 'json',   
      quote_plus('ServiceKey') : service_key
  })

  API_curr_politician_url = curr_politician_base_url + unquote(queryParams)

  response = urlopen(API_curr_politician_url)
  json_str = response.read().decode('utf-8')
  json_str = json.dumps(xmltodict.parse(json_str), indent=4)

  json_object = json.loads(json_str)

  curr_politician_data = pd.json_normalize(json_object['response']['body']['items']['item'])

  return curr_politician_data

get_curr_politician_mem().head()

"""### Member detail"""

def get_politician_detail(dept_code, numOfRows=1000):
  politician_detail_base_url = 'http://apis.data.go.kr/9710000/NationalAssemblyInfoService/getMemberDetailInfoList'

  queryParams = '?' + urlencode({
      quote_plus('numOfRows') : numOfRows,
      quote_plus('dept_cd') : dept_code,
      quote_plus('resultType') : 'json',   
      quote_plus('ServiceKey') : service_key
  })

  API_politician_detail_url = politician_detail_base_url + unquote(queryParams)

  response = urlopen(API_politician_detail_url)
  json_str = response.read().decode('utf-8')
  json_str = json.dumps(xmltodict.parse(json_str), indent=4)

  json_object = json.loads(json_str)

  politician_detail_data = pd.json_normalize(json_object['response']['body']['item'])

  return politician_detail_data

get_politician_detail(9771106)

"""## Winner info dataframe"""

def get_winner_df(sgId, sgTypecode, num_of_row=1000):
  winner_base_url = 'http://apis.data.go.kr/9760000/WinnerInfoInqireService2/getWinnerInfoInqire'

  queryParams = '?' + urlencode({
      quote_plus('numOfRows') : str(num_of_row),        # optional
      quote_plus('sgId') : str(sgId),                   # load from election code
      quote_plus('sgTypecode') : str(sgTypecode),       # load from election code
      quote_plus('sggName') : '',                       # optional
      quote_plus('sdName') : '',                        # optional
      quote_plus('resultType') : 'json',                # must set JSON
      quote_plus('ServiceKey') : service_key
  })

  API_winner_url = winner_base_url + unquote(queryParams)

  # candidate info load

  response = urlopen(API_winner_url)
  json_str = response.read().decode('utf-8')

  json_object = json.loads(json_str)

  body = [json_object['getWinnerInfoInqire']['item']]

  winner_data = pd.json_normalize(json_object['getWinnerInfoInqire']['item'])

  return winner_data

get_winner_df(20160413, 4)

"""# DataFrame load test

## Election code load
"""

get_election_df().head()

"""## Cadidate info load"""

get_candidate_df(20160413, 2)['STATUS'].unique()

"""## Promise load"""

# 당선인이 나온 후엔 당선인 공약만 확인 가능
data = get_promise_df(20210407, 3, 100138272)
data

"""## Poll info load

### Pre poll info load
"""

get_prepoll_df(20210407, '서울특별시').head()

"""### Main poll info load"""

get_mainpoll_df(20210407, '서울특별시').head()

"""# Data Preprocessing

## election_code data preprocessing
"""

def election_code_preprocessing():
  data = get_election_df()
  data = data.drop('NUM', axis=1)
  data.columns = ['sgId', 'sgName', 'sgTypecode', 'sgVotedate']
  election_code = data
  election_code = election_code.astype({'sgId':int, 'sgTypecode':int, 'sgName':str})
  election_code.set_index('sgId', inplace=True)

  return election_code

election_code = election_code_preprocessing()

election_code.head()

election_df = election_code.reset_index()

"""## Politician data preprocessing"""

def politician_preprocessing():
  # current politician data preprocessing
  curr_data_df = get_curr_politician_mem()
  curr_data = curr_data_df.drop(['engNm', 'hjNm', 'origNm', 'reeleGbnNm'], axis=1)
  curr_data.columns = ['deptCode', 'name', 'imageLink', 'num']

  # export dept_code for find detail politician
  dept_code = curr_data['deptCode'].unique().astype(int)

  # detail politician data preprocessing
  detail_df = pd.DataFrame()

  for deptCd in dept_code:
    detail_data = get_politician_detail(deptCd)
    detail_data['deptCode'] = deptCd
    detail_df = pd.concat([detail_df, detail_data], ignore_index=True)

  detail_data = detail_df.drop(['assemEmail','assemHomep','assemTel', 'electionNum', 'engNm', 'hjNm', 'reeleGbnNm', 'secretary', 'secretary2', 'shrtNm', 'staff', 'hbbyCd', 'examCd'], axis=1)
  detail_data.columns = ['birthday', 'name', 'memTitle', 'sggName' , 'partyName', 'deptCode']

  # column type match to database column
  curr_data = curr_data.astype({'deptCode':int})
  detail_data = detail_data.astype({'deptCode':int})

  # join the current politician and detail poloitician
  politician = pd.merge(curr_data, detail_data, how='left', on=['name', 'deptCode'])
  politician['age'] = dt.datetime.now().year - pd.to_datetime(politician['birthday']).dt.year - 1
  politician['birthday'] = pd.to_datetime(politician['birthday'], format='%Y-%m-%d')
  politician.set_index('deptCode', inplace=True)

  return politician

politician = politician_preprocessing()

len(politician)

"""## Candidate data preprocessing"""

def candidate_code_preprocessing():
  election_code = election_code_preprocessing()
  data = election_code.reset_index()  
  election_data = data[['sgId', 'sgTypecode']]

  candidate_df = pd.DataFrame()

  # concat all candidate df
  for i in range(len(election_data)):
    curr_id = election_data['sgId'][i]
    curr_code = election_data['sgTypecode'][i]
    curr_df = pd.DataFrame()

    if curr_code != 0:
      curr_df = get_candidate_df(curr_id, curr_code)
    
    candidate_df = pd.concat([candidate_df, curr_df], ignore_index=True)
  
  # candidate column change
  candidate = candidate_df.drop(['NUM', 'GIHO_SANGSE', 'HANJA_NAME', 'JOB_ID', 'EDU_ID', 'EDU', 'CAREER1', 'CAREER2', 'AGE'], axis=1)
  candidate.columns = ['sgId', 'sgTypecode', 'cnddtId', 'sggName', 'sdName', 'wiwName', 'giho', 'partyName', 'name', 'gender', 'birthday','address', 'job', 'status']

  # encoding data
  le = LabelEncoder()

  for category in ['gender', 'status']:
    candidate[category] = le.fit_transform(candidate[category])

  # giho null value
  candidate[candidate['giho'] == ''] = 1

  # type matching to sql column type
  candidate = candidate.astype({'sgId':int, 'sgTypecode':int, 'cnddtId':int, 'gender':int, 'status':int, 'giho':int})
  candidate['birthday'] = pd.to_datetime(candidate['birthday'], format='%Y-%m-%d')
  candidate.set_index('cnddtId', inplace=True)

  cndd_idx = candidate[candidate['sgId']==1].index
  candidate = candidate.drop(cndd_idx)

  return candidate

candidate = candidate_code_preprocessing()

candidate.head()

candidate[candidate['status'] == 1]

"""## Polls data preprocessing

### pre_polls data preprocessing
"""

def pre_poll_preprocessing():
  sdarr = candidate['sdName'].unique()
  datearr = election_code['sgVotedate'].unique()
  
  total = pd.DataFrame()
  for dt in datearr:
    for sd in sdarr:
      try:
        cur = get_prepoll_df(dt, sd)
        total = pd.concat([total, cur], ignore_index=True)
      except:
        print(sd, 'no propoll at', dt)
  
  total.drop(['NUM'], axis=1, inplace=True)
  total.columns = ['sgId', 'evPsName', 'sdName', 'wiwName', 'emdName', 'evOrder', 'placeName','address', 'floor']  
  total = total.astype({'sgId':int, 'evOrder':int})
  total.set_index('sgId', inplace=True)
  
  return total

pre_poll = pre_poll_preprocessing()
pre_poll.head()

pre_poll[pre_poll['evPsName'] == '동명동사전투표소']

"""### main_polls data preprocessing"""

def main_poll_preprocessing():
  sdarr = candidate['sdName'].unique()
  datearr = election_code['sgVotedate'].unique()

  total = pd.DataFrame()
  for dt in datearr:
    for sd in sdarr:
      try:
        cur = get_mainpoll_df(dt, sd)
        total = pd.concat([total, cur], ignore_index=True)
      except:
        print(sd, 'no mainpoll at', dt)
      
  total.drop(['NUM'], axis=1, inplace=True)
  total.columns = ['sgId', 'PsName', 'sdName', 'wiwName', 'emdName', 'placeName','address', 'floor']  
  total = total.astype({'sgId':int})
  total.set_index('sgId', inplace=True)
  
  return total

main_poll = main_poll_preprocessing()

main_poll.head()

main_poll[main_poll['placeName'] == '전천후 게이트볼장 (1층)']

"""## Promise data preprocessing

### collect all winner data
"""

elec = election_df[['sgId', 'sgTypecode']]

winner_df = pd.DataFrame()

for i in range(len(elec)):
  sgId = elec['sgId'][i]
  sgTypecode = elec['sgTypecode'][i]

  if sgTypecode == '0' or sgTypecode == 0:
    continue
  else:
    data = get_winner_df(sgId, sgTypecode)
    winner_df = pd.concat([winner_df, data], ignore_index=True)

"""### extract winners with available typecode"""

winner_with_prom = winner_df[(winner_df['SG_TYPECODE'] == '1') | 
                             (winner_df['SG_TYPECODE'] == '3') | 
                             (winner_df['SG_TYPECODE'] == '4') | 
                             (winner_df['SG_TYPECODE'] == '11')]

print(len(winner_with_prom))
winner_with_prom['SG_TYPECODE'].unique()
winner_with_prom.reset_index(drop=True, inplace=True)

"""### collect all promise data"""

def get_winner_promise(wdf):
  total = pd.DataFrame()
  for i in wdf.index:
    print('\n', wdf._get_value(i, 'SG_ID'), wdf._get_value(i, 'NAME'), end='')
  
    try:
      cur = get_promise_df(wdf._get_value(i, 'SG_ID'), 
                           wdf._get_value(i, 'SG_TYPECODE'), 
                           wdf._get_value(i, 'HUBOID'))
      total = pd.concat([total, cur], ignore_index=True)
      print('exists')
    except:
      continue
  return total

"""### save"""

# promise_df = get_winner_promise(winner_with_prom)
# promise_df.to_csv("winner_df.csv", mode='w')

"""### load"""

#!wget https://raw.githubusercontent.com/ElectionInfo/Data_code/main/winner_df.csv &> /dev/null

promise_df = pd.read_csv("winner_df.csv")
promise_df.head(1)

"""### parsing promises"""

def promise_parse(prom):
  total = pd.DataFrame()
  for i in prom.index:
    for prmnum in range(1, 11):
      
      prmord = prom._get_value(i, 'prmsOrd' + str(prmnum))

      if pd.isna(prmord) == True:
        break

      prmcont = prom._get_value(i, 'prmmCont' + str(prmnum))

      # prmcont parsing

      cur = pd.DataFrame([[
                          prom._get_value(i, 'cnddtId'),
                          prmord,
                          prom._get_value(i, 'prmsTitle' + str(prmnum)),
                          prmcont
                          ]], columns=['cnddtId', 'prmOrd', 'prmTitle', 'prmCont'])
      
      total = pd.concat([total, cur], ignore_index=True)
  total = total.astype({'cnddtId':int, 'prmOrd':int})
  total.set_index('cnddtId', inplace=True)
  return total

promise = promise_parse(promise_df)
promise.head()

"""# MySQL link to GCP

## GCP MySQL connection
"""

host = '34.64.72.201'
user = 'root'
pw = 'root'
db = 'election'
port = 3306

try:
    conn = pymysql.connect(host=host, port=port, user=user, password=pw, db=db)
    engine = create_engine('mysql+mysqldb://'+user+':'+pw+'@'+host+':3306/'+db, encoding='utf-8')

except Exception as err:
    print('Connection Failed (Error msg : ' + str(err) + ')')
else:
    print('Connection  Success!')

connection = engine.connect()
connection

"""# Queries & data insert

## CREATE TABLE
"""

cursor = conn.cursor()

cursor

create_election_code = """CREATE TABLE election_code (  
    sgId INT NOT NULL,
    sgTypecode INT NOT NULL,
    sgName VARCHAR(50) NOT NULL,
    sgVotedate DATETIME NOT NULL,
    PRIMARY KEY (sgId, sgTypecode)
) default charset utf8;"""

create_pre_polls = """CREATE TABLE pre_polls (  
    sgId INT NOT NULL,
    sdName VARCHAR(30) NOT NULL ,
    wiwName VARCHAR(30) NOT NULL ,
    emdName VARCHAR(50) NOT NULL ,
    evOrder INT NOT NULL ,
    evPsName VARCHAR(80) NOT NULL ,
    placeName VARCHAR(100) NOT NULL ,
    `address` VARCHAR(150) NOT NULL ,
    `floor` VARCHAR(20) NOT NULL ,
    PRIMARY KEY(sgId, evPsName, placeName) ,
    FOREIGN KEY(sgId) REFERENCES election_code(sgId)
) default charset utf8;"""

create_main_polls = """CREATE TABLE main_polls (  
    sgId INT NOT NULL,
    sdName VARCHAR(30) NOT NULL ,
    wiwName VARCHAR(30) NOT NULL ,
    emdName VARCHAR(50) NOT NULL ,
    PsName VARCHAR(80) NOT NULL ,
    placeName VARCHAR(100) NOT NULL ,
    `address` VARCHAR(150) NOT NULL ,
    `floor` VARCHAR(20) NOT NULL ,
    PRIMARY KEY(sgId, PsName, placeName) ,
    FOREIGN KEY(sgId) REFERENCES election_code(sgId)
) default charset utf8;"""

politician.head()

create_politician = """CREATE TABLE politician (
    num INT NOT NULL ,
    `name` VARCHAR(20) NOT NULL ,
    imageLink TEXT ,
    sggName VARCHAR(35) NOT NULL ,
    deptCode INT NOT NULL ,
    memTitle LONGTEXT ,
    birthday DATETIME NOT NULL ,
    partyName VARCHAR(50),
    age INT NOT NULL ,
    PRIMARY KEY (num)
) default charset utf8;"""

candidate.head()

create_candidate = """CREATE TABLE candidate (
    cnddtId INT NOT NULL ,
    sgId INT NOT NULL ,
    sgTypecode INT NOT NULL ,
    sggName VARCHAR(35) NOT NULL ,
    sdName VARCHAR(30) NOT NULL ,
    wiwName VARCHAR(30) NOT NULL ,
    giho INT NOT NULL ,
    partyName VARCHAR(50),
    `name` VARCHAR(20) NOT NULL ,
    gender TINYINT NOT NULL ,
    `address` VARCHAR(100) ,
    job VARCHAR(100) ,
    `status` TINYINT NOT NULL ,
    birthday DATETIME NOT NULL ,
    PRIMARY KEY (cnddtId),
    FOREIGN KEY (sgId, sgTypecode) REFERENCES election_code (sgId, sgTypecode)
) default charset utf8;"""

create_promise = """CREATE TABLE promise (
    cnddtId INT NOT NULL ,
    prmOrd INT NOT NULL,
    prmTitle VARCHAR(100) ,
    prmCont LONGTEXT,
    PRIMARY KEY (cnddtId, prmOrd),
    FOREIGN KEY (cnddtId) REFERENCES candidate (cnddtId)
);"""

"""## Data insert

### election_code insert
"""

cursor.execute(create_election_code)

cursor.execute(create_pre_polls)

cursor.execute(create_main_polls)

cursor.execute(create_politician)

cursor.execute(create_candidate)

cursor.execute(create_promise)

election_code.to_sql(name='election_code', con=engine, if_exists='append')

"""### Politician insert"""

politician.to_sql(name='politician', con=engine, if_exists='append')

"""### candidate insert"""

candidate.to_sql(name='candidate', con=engine, if_exists='append')

"""### pre_poll insert"""

pre_poll.to_sql(name='pre_polls', con=engine, if_exists='append')

"""### main_poll insert"""

main_poll.to_sql(name='main_polls', con=engine, if_exists='append')

"""### promise insert"""

promise.to_sql(name='promise', con=engine, if_exists='append')